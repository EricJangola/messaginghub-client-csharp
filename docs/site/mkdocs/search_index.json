{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/overview/", 
            "text": "Vis\u00e3o Geral\n\n\nO cliente do Messaging Hub foi desenvolvido para tornar mais f\u00e1cil o trabalho com o cliente do protocolo lime para troca de mensanges, comandos e notifica\u00e7\u00f5es entre as aplica\u00e7\u00f5es e servi\u00e7os conectadas pelo Messaging Hub.\n\n\nO cliente est\u00e1 dispon\u00edvel em m\u00faltiplas linguagens de programa\u00e7\u00f5es, como \nC#\n, \nJava\n and \nJavascript\n, e usa a mesma sem\u00e2ntica em todas elas.\n\n\nOs c\u00f3digos fonte est\u00e3o dispon\u00edveis no \nGitHub\n e podem ser usados para refer\u00eancia e tamb\u00e9m para contribui\u00e7\u00e3o da comunidade. Se voc\u00ea deseja melhorar o cliente, fork o projeto e nos envie um pool request.\n\n\nTrabalhando com o cliente do Messaging Hub\n\n\nAs seguintes opera\u00e7\u00f5es s\u00e3o suportados:\n\n\n\n\n\n\nReceber mensagens atrav\u00e9s do Messaging Hub;\n\n\n\n\n\n\nEnviar  mensagens atrav\u00e9s do Messaging Hub;\n\n\n\n\n\n\nReceber notifica\u00e7\u00f5es atrav\u00e9s do Messaging Hub;\n\n\n\n\n\n\nEnviar notifica\u00e7\u00f5es atrav\u00e9s do Messaging Hub;\n\n\n\n\n\n\nEnviar comandos atrav\u00e9s do Messaging Hub;\n\n\n\n\n\n\nPara reveber envelopes (mensagens e notifica\u00e7\u00f5es) o cliente requer que o desenvolvedor registre agentes receptores que ir\u00e3o filtrar os dados recebidos e executar a a\u00e7\u00e3o desejada sobre eles, como no exemplo a seguir:\n\n\npublic class PlainTextMessageReceiver : MessageReceiverBase\n{\n    public override async Task ReceiveAsync(Message message)\n    {\n        // Faz algo com a mensagem recebida\n    }\n}\n\n// Registra um receptor para receber mensagens com `media type` 'text/plain'\nclient.AddMessageReceiver(new PlainTextMessageReceiver(), MediaTypes.PlainText)\n\n\n\n\nPara opera\u00e7\u00f5es de envio, o cliente prov\u00ea m\u00e9todos Send que podem ser invocados diretamente, como no exemplo a seguir:\n\n\n// Envia uma mensagem de texto para 'user@msging.net' \nawait client.SendMessageAsync(\nOl\u00e1, mundo\n, to: \nuser\n);\n\n\n\n\nPara mais informa\u00e7\u00f5es espec\u00edficas de uso, veja a documenta\u00e7\u00e3o detalheada para \nConfigura\u00e7\u00e3o do Cliente\n, \nMensagens\n, \nNotifica\u00e7\u00f5es\n e \nComandos\n.\n\n\nRetornar ao \u00cdndice", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#visao-geral", 
            "text": "O cliente do Messaging Hub foi desenvolvido para tornar mais f\u00e1cil o trabalho com o cliente do protocolo lime para troca de mensanges, comandos e notifica\u00e7\u00f5es entre as aplica\u00e7\u00f5es e servi\u00e7os conectadas pelo Messaging Hub.  O cliente est\u00e1 dispon\u00edvel em m\u00faltiplas linguagens de programa\u00e7\u00f5es, como  C# ,  Java  and  Javascript , e usa a mesma sem\u00e2ntica em todas elas.  Os c\u00f3digos fonte est\u00e3o dispon\u00edveis no  GitHub  e podem ser usados para refer\u00eancia e tamb\u00e9m para contribui\u00e7\u00e3o da comunidade. Se voc\u00ea deseja melhorar o cliente, fork o projeto e nos envie um pool request.", 
            "title": "Vis\u00e3o Geral"
        }, 
        {
            "location": "/overview/#trabalhando-com-o-cliente-do-messaging-hub", 
            "text": "As seguintes opera\u00e7\u00f5es s\u00e3o suportados:    Receber mensagens atrav\u00e9s do Messaging Hub;    Enviar  mensagens atrav\u00e9s do Messaging Hub;    Receber notifica\u00e7\u00f5es atrav\u00e9s do Messaging Hub;    Enviar notifica\u00e7\u00f5es atrav\u00e9s do Messaging Hub;    Enviar comandos atrav\u00e9s do Messaging Hub;    Para reveber envelopes (mensagens e notifica\u00e7\u00f5es) o cliente requer que o desenvolvedor registre agentes receptores que ir\u00e3o filtrar os dados recebidos e executar a a\u00e7\u00e3o desejada sobre eles, como no exemplo a seguir:  public class PlainTextMessageReceiver : MessageReceiverBase\n{\n    public override async Task ReceiveAsync(Message message)\n    {\n        // Faz algo com a mensagem recebida\n    }\n}\n\n// Registra um receptor para receber mensagens com `media type` 'text/plain'\nclient.AddMessageReceiver(new PlainTextMessageReceiver(), MediaTypes.PlainText)  Para opera\u00e7\u00f5es de envio, o cliente prov\u00ea m\u00e9todos Send que podem ser invocados diretamente, como no exemplo a seguir:  // Envia uma mensagem de texto para 'user@msging.net' \nawait client.SendMessageAsync( Ol\u00e1, mundo , to:  user );  Para mais informa\u00e7\u00f5es espec\u00edficas de uso, veja a documenta\u00e7\u00e3o detalheada para  Configura\u00e7\u00e3o do Cliente ,  Mensagens ,  Notifica\u00e7\u00f5es  e  Comandos .  Retornar ao \u00cdndice", 
            "title": "Trabalhando com o cliente do Messaging Hub"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Como come\u00e7ar?\n\n\nEste guia de como come\u00e7ar ir\u00e1 apresentar a voc\u00ea o uso das funcionalidades b\u00e1sicas do cliente do Messaging Hub \n\n\nInstanciando o cliente:\n\n\nconst string login = \nguest\n;\nconst string password = \nguest\n;\n\nvar client = new MessagingHubClient() // Uma vez que o nome do host e do dom\u00ednio n\u00e3o foram informados, o valor padr\u00e3o, 'msging.net', ser\u00e1 utilizado para ambos os par\u00e2metros\n                .UsingAccount(login, password);\n\n\n\n\nSe inscrevendo para receber uma mensagem de texto:\n\n\npublic class PlainTextMessageReceiver : MessageReceiverBase\n{\n    public override async Task ReceiveAsync(Message message)\n    {\n        Console.WriteLine(message.Content.ToString());\n        await MessageSender.SendMessageAsync(\nObrigado por sua mensagem!\n, message.From);\n    }\n}\n\nclient.AddMessageReceiver(messageReceiver: new PlainTextMessageReceiver(), forMimeType: MediaTypes.PlainText);\n\n\n\n\nSe inscrevendo para receber uma notifica\u00e7\u00e3o:\n\n\npublic class PrintNotificationReceiver : NotificationReceiverBase\n{\n    public override Task ReceiveAsync(Notification notification)\n    {\n        Console.WriteLine(\nNotifica\u00e7\u00e3o do evento {0} recebida. Motivo: {1}\n, notification.Event, notification.Reason);\n        return Task.FromResult(0);\n    }\n}\n\nclient.AddNotificationReceiver(receiverBuilder: () =\n new PrintNotificationReceiver());\n\n\n\n\nIniciando o cliente:\n\n\n// AP\u00d3S registrados os receptores, o cliente DEVE ser iniciado\nawait client.StartAsync();\n\n\n\n\nEnviando um comando e acessando sua resposta:\n\n\nvar command = new Command {\n    Method = CommandMethod.Get,\n    Uri = new LimeUri(\n/account\n)\n};\n\nvar responseCommand = await client.SendCommandAsync(command);\n\nvar account = (Account)responseCommand.Resource;\n\nConsole.WriteLine(account.Email);\n\n\n\n\nPublicando uma mensagem:\n\n\nawait client.SendMessageAsync(\nOl\u00e1, mundo\n, to: \nuser\n);\n\n\n\n\nDesconectando:\n\n\nawait client.StopAsync();\n\n\n\n\nRetornar ao \u00cdndice", 
            "title": "Getting Starter"
        }, 
        {
            "location": "/getting-started/#como-comecar", 
            "text": "Este guia de como come\u00e7ar ir\u00e1 apresentar a voc\u00ea o uso das funcionalidades b\u00e1sicas do cliente do Messaging Hub", 
            "title": "Como come\u00e7ar?"
        }, 
        {
            "location": "/getting-started/#instanciando-o-cliente", 
            "text": "const string login =  guest ;\nconst string password =  guest ;\n\nvar client = new MessagingHubClient() // Uma vez que o nome do host e do dom\u00ednio n\u00e3o foram informados, o valor padr\u00e3o, 'msging.net', ser\u00e1 utilizado para ambos os par\u00e2metros\n                .UsingAccount(login, password);", 
            "title": "Instanciando o cliente:"
        }, 
        {
            "location": "/getting-started/#se-inscrevendo-para-receber-uma-mensagem-de-texto", 
            "text": "public class PlainTextMessageReceiver : MessageReceiverBase\n{\n    public override async Task ReceiveAsync(Message message)\n    {\n        Console.WriteLine(message.Content.ToString());\n        await MessageSender.SendMessageAsync( Obrigado por sua mensagem! , message.From);\n    }\n}\n\nclient.AddMessageReceiver(messageReceiver: new PlainTextMessageReceiver(), forMimeType: MediaTypes.PlainText);", 
            "title": "Se inscrevendo para receber uma mensagem de texto:"
        }, 
        {
            "location": "/getting-started/#se-inscrevendo-para-receber-uma-notificacao", 
            "text": "public class PrintNotificationReceiver : NotificationReceiverBase\n{\n    public override Task ReceiveAsync(Notification notification)\n    {\n        Console.WriteLine( Notifica\u00e7\u00e3o do evento {0} recebida. Motivo: {1} , notification.Event, notification.Reason);\n        return Task.FromResult(0);\n    }\n}\n\nclient.AddNotificationReceiver(receiverBuilder: () =  new PrintNotificationReceiver());", 
            "title": "Se inscrevendo para receber uma notifica\u00e7\u00e3o:"
        }, 
        {
            "location": "/getting-started/#iniciando-o-cliente", 
            "text": "// AP\u00d3S registrados os receptores, o cliente DEVE ser iniciado\nawait client.StartAsync();", 
            "title": "Iniciando o cliente:"
        }, 
        {
            "location": "/getting-started/#enviando-um-comando-e-acessando-sua-resposta", 
            "text": "var command = new Command {\n    Method = CommandMethod.Get,\n    Uri = new LimeUri( /account )\n};\n\nvar responseCommand = await client.SendCommandAsync(command);\n\nvar account = (Account)responseCommand.Resource;\n\nConsole.WriteLine(account.Email);", 
            "title": "Enviando um comando e acessando sua resposta:"
        }, 
        {
            "location": "/getting-started/#publicando-uma-mensagem", 
            "text": "await client.SendMessageAsync( Ol\u00e1, mundo , to:  user );", 
            "title": "Publicando uma mensagem:"
        }, 
        {
            "location": "/getting-started/#desconectando", 
            "text": "await client.StopAsync();  Retornar ao \u00cdndice", 
            "title": "Desconectando:"
        }, 
        {
            "location": "/commands/", 
            "text": "Comandos\n\n\nO cliente permite que voc\u00ea envie comandos atrav\u00e9s do Messaging Hub. No entanto n\u00e3o \u00e9 poss\u00edvel receber comandos. \n\n\nEnviando comandos\n\n\nPara enviar um comando, voc\u00ea pode usar o seguinte m\u00e9todo:\n\n\nvar command = new Command {\n    Method = CommandMethod.Get,\n    Uri = new LimeUri(\n/account\n)\n};\n\nvar response = await client.SendCommandAsync(command);\n\n\n\n\nDiferentemente de mensagens e notifica\u00e7\u00f5es, quando voc\u00ea envia um comando, voc\u00ea recebe uma resposta quando a tarefa \u00e9 conclu\u00edda. Essa resposta cont\u00e9m informa\u00e7\u00f5es a respeito do resultado da execu\u00e7\u00e3o do comando enviado.\n\n\nRetornar ao \u00cdndice", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#comandos", 
            "text": "O cliente permite que voc\u00ea envie comandos atrav\u00e9s do Messaging Hub. No entanto n\u00e3o \u00e9 poss\u00edvel receber comandos.", 
            "title": "Comandos"
        }, 
        {
            "location": "/commands/#enviando-comandos", 
            "text": "Para enviar um comando, voc\u00ea pode usar o seguinte m\u00e9todo:  var command = new Command {\n    Method = CommandMethod.Get,\n    Uri = new LimeUri( /account )\n};\n\nvar response = await client.SendCommandAsync(command);  Diferentemente de mensagens e notifica\u00e7\u00f5es, quando voc\u00ea envia um comando, voc\u00ea recebe uma resposta quando a tarefa \u00e9 conclu\u00edda. Essa resposta cont\u00e9m informa\u00e7\u00f5es a respeito do resultado da execu\u00e7\u00e3o do comando enviado.  Retornar ao \u00cdndice", 
            "title": "Enviando comandos"
        }, 
        {
            "location": "/messages/", 
            "text": "Mensagens\n\n\nO cliente permite que voc\u00ea envie e receba mensagens atrav\u00e9s do Messaging Hub.\n\n\nRecebendo Mensagens\n\n\nPara receber uma mensagem, registre um receptor da seguinte forma:\n\n\npublic class MyMessageReceiver : MessageReceiverBase\n{\n    public override async Task ReceiveAsync(Message message)\n    {\n        // Escreve o conte\u00fado da mensagem no console\n        Console.WriteLine(message.Content.ToString());\n    }\n}\n\nclient.AddMessageReceiver(new MyMessageReceiver(), MediaTypes.PlainText);\n\n\n\n\nTamb\u00e9m \u00e9 poss\u00edvel passar um factory method para construir o receptor:\n\n\nclient.AddMessageReceiver(() =\n new MyMessageReceiver(), MediaTypes.PlainText);\n\n\n\n\nE voc\u00ea pode especificar um media type para filtrar suas mensagens\n\n\nclient.AddMessageReceiver(() =\n new MyMessageReceiver(), new MediaType(MediaType.DiscreteTypes.Application, MediaType.SubTypes.JSON));\n\n\n\n\nEnviando Mensagens\n\n\nPara enviar uma mensagem, voc\u00ea pode usar o seguinte m\u00e9todo:\n\n\nvar message = new Message\n{\n    To = Node.Parse(\nuser\n),\n    Content = \nTexto da Mensagem\n\n};\n\nawait client.SendMessageAsync(message);\n\n\n\n\nOu voc\u00ea pode usar um destes m\u00e9todos de extens\u00e3o para construir e enviar sua mensagem:\n\n\nawait client.SendMessageAsync(\nTexto da Mensagem\n, to: \nuser\n);\n\nawait client.SendMessageAsync(\nTexto da Mensagem\n, Node.Parse(\nuser\n));\n\n\n\n\nRetornar ao \u00cdndice", 
            "title": "Messages"
        }, 
        {
            "location": "/messages/#mensagens", 
            "text": "O cliente permite que voc\u00ea envie e receba mensagens atrav\u00e9s do Messaging Hub.", 
            "title": "Mensagens"
        }, 
        {
            "location": "/messages/#recebendo-mensagens", 
            "text": "Para receber uma mensagem, registre um receptor da seguinte forma:  public class MyMessageReceiver : MessageReceiverBase\n{\n    public override async Task ReceiveAsync(Message message)\n    {\n        // Escreve o conte\u00fado da mensagem no console\n        Console.WriteLine(message.Content.ToString());\n    }\n}\n\nclient.AddMessageReceiver(new MyMessageReceiver(), MediaTypes.PlainText);  Tamb\u00e9m \u00e9 poss\u00edvel passar um factory method para construir o receptor:  client.AddMessageReceiver(() =  new MyMessageReceiver(), MediaTypes.PlainText);  E voc\u00ea pode especificar um media type para filtrar suas mensagens  client.AddMessageReceiver(() =  new MyMessageReceiver(), new MediaType(MediaType.DiscreteTypes.Application, MediaType.SubTypes.JSON));", 
            "title": "Recebendo Mensagens"
        }, 
        {
            "location": "/messages/#enviando-mensagens", 
            "text": "Para enviar uma mensagem, voc\u00ea pode usar o seguinte m\u00e9todo:  var message = new Message\n{\n    To = Node.Parse( user ),\n    Content =  Texto da Mensagem \n};\n\nawait client.SendMessageAsync(message);  Ou voc\u00ea pode usar um destes m\u00e9todos de extens\u00e3o para construir e enviar sua mensagem:  await client.SendMessageAsync( Texto da Mensagem , to:  user );\n\nawait client.SendMessageAsync( Texto da Mensagem , Node.Parse( user ));  Retornar ao \u00cdndice", 
            "title": "Enviando Mensagens"
        }, 
        {
            "location": "/notifications/", 
            "text": "Notifica\u00e7\u00f5es\n\n\nO cliente permite que voc\u00ea envie e receba notifica\u00e7\u00f5es atrav\u00e9s do Messaging Hub.\n\n\nRecebendo Notifica\u00e7\u00f5es\n\n\nPara receber uma notifica\u00e7\u00e3o, registre um receptor da seguinte forma:\n\n\npublic class MyNotificationReceiver : NotificationReceiverBase\n{\n    public override async Task ReceiveAsync(Notification notification)\n    {\n        // Escreve a notifica\u00e7\u00e3o recebida no console\n        Console.WriteLine(notification.ToString());\n    }\n}\n\nclient.AddNotificationReceiver(new MyNotificationReceiver());\n\n\n\n\nTamb\u00e9m \u00e9 poss\u00edvel passar um factory method para construir o receptor:\n\n\nclient.AddNotificationReceiver(() =\n new MyNotificationReceiver());\n\n\n\n\nE voc\u00ea pode especificar um \nevent type\n para filtrar suas mensagens\n\n\nclient.AddNotificationReceiver(() =\n new MyNotificationReceiver(), Event.Received);\n\n\n\n\nEnviando Notifica\u00e7\u00f5es\n\n\nPara enviar uma notifica\u00e7\u00e3o, voc\u00ea pode usar o seguinte m\u00e9todo:\n\n\nvar notification = new Notification\n{\n    To = Node.Parse(\nuser\n),\n    Event = Event.Received\n};\n\nawait client.SendNotificationAsync(notification);\n\n\n\n\nOu voc\u00ea pode usar um destes m\u00e9todos de extens\u00e3o para construir e enviar sua notifica\u00e7\u00e3o:\n\n\nawait client.SendNotificationAsync(message.ToReceivedNotification());\n\nawait client.SendNotificationAsync(message.ToConsumedNotification());\n\nawait client.SendNotificationAsync(message.ToFailedNotification());\n\nawait client.SendNotificationAsync(message.ToNotification(Event.Received));\n\n\n\n\nRetornar ao \u00cdndice", 
            "title": "Notifications"
        }, 
        {
            "location": "/notifications/#notificacoes", 
            "text": "O cliente permite que voc\u00ea envie e receba notifica\u00e7\u00f5es atrav\u00e9s do Messaging Hub.", 
            "title": "Notifica\u00e7\u00f5es"
        }, 
        {
            "location": "/notifications/#recebendo-notificacoes", 
            "text": "Para receber uma notifica\u00e7\u00e3o, registre um receptor da seguinte forma:  public class MyNotificationReceiver : NotificationReceiverBase\n{\n    public override async Task ReceiveAsync(Notification notification)\n    {\n        // Escreve a notifica\u00e7\u00e3o recebida no console\n        Console.WriteLine(notification.ToString());\n    }\n}\n\nclient.AddNotificationReceiver(new MyNotificationReceiver());  Tamb\u00e9m \u00e9 poss\u00edvel passar um factory method para construir o receptor:  client.AddNotificationReceiver(() =  new MyNotificationReceiver());  E voc\u00ea pode especificar um  event type  para filtrar suas mensagens  client.AddNotificationReceiver(() =  new MyNotificationReceiver(), Event.Received);", 
            "title": "Recebendo Notifica\u00e7\u00f5es"
        }, 
        {
            "location": "/notifications/#enviando-notificacoes", 
            "text": "Para enviar uma notifica\u00e7\u00e3o, voc\u00ea pode usar o seguinte m\u00e9todo:  var notification = new Notification\n{\n    To = Node.Parse( user ),\n    Event = Event.Received\n};\n\nawait client.SendNotificationAsync(notification);  Ou voc\u00ea pode usar um destes m\u00e9todos de extens\u00e3o para construir e enviar sua notifica\u00e7\u00e3o:  await client.SendNotificationAsync(message.ToReceivedNotification());\n\nawait client.SendNotificationAsync(message.ToConsumedNotification());\n\nawait client.SendNotificationAsync(message.ToFailedNotification());\n\nawait client.SendNotificationAsync(message.ToNotification(Event.Received));  Retornar ao \u00cdndice", 
            "title": "Enviando Notifica\u00e7\u00f5es"
        }, 
        {
            "location": "/client-configuration/", 
            "text": "Configura\u00e7\u00e3o do Cliente\n\n\nO cliente do Messaging Hub foi projetado para ser simples e f\u00e1cil de usar, deste modo poucas configura\u00e7\u00f5es est\u00e3o dispon\u00edveis.\n\n\nPara se conectar ao Messaging Hub, o host padr\u00e3o, \n\"msging.net\"\n e o dom\u00ednio padr\u00e3o, tamb\u00e9m \n\"msging.net\"\n, s\u00e3o usados por padr\u00e3o. Caso queira especificar outro host ou dom\u00ednio, voc\u00ea pode passa-los no construtor do cliente, como exibido abaixo:  \n\n\nvar client = new MessagingHubClient(\nmeuhost.com\n, \nmeudominio.com\n)\n\n\n\n\nAl\u00e9m do nome do host e do dom\u00ednio, uma autentica\u00e7\u00e3o \u00e9 obrigat\u00f3ria. Essa autentica\u00e7\u00e3o pode ser na forma de um login e senha, ou na forma de um login e uma chave de acesso, sendo o m\u00e9todo da chave de acesso preferencial.\n\n\nUsando login e senha:\n\n\nconst string login = \nuser\n;\nconst string password = \npassword\n;\n\n// Uma vez que o nome do host e a senha n\u00e3o foram informados, os valores padr\u00f5es ser\u00e3o usados.\nvar client = new MessagingHubClient()\n                .UsingAccount(login, password);\n\n\n\n\nUsando login e chave de acesso:\n\n\nconst string login = \nuser\n;\nconst string accessKey = \nkey\n;\n\n// Uma vez que o nome do host e a senha n\u00e3o foram informados, os valores padr\u00f5es ser\u00e3o usados.\nvar client = new MessagingHubClient()\n                .UsingAccessKey(login, accessKey);\n\n\n\n\nRetornar ao \u00cdndice", 
            "title": "Client Configuration"
        }, 
        {
            "location": "/client-configuration/#configuracao-do-cliente", 
            "text": "O cliente do Messaging Hub foi projetado para ser simples e f\u00e1cil de usar, deste modo poucas configura\u00e7\u00f5es est\u00e3o dispon\u00edveis.  Para se conectar ao Messaging Hub, o host padr\u00e3o,  \"msging.net\"  e o dom\u00ednio padr\u00e3o, tamb\u00e9m  \"msging.net\" , s\u00e3o usados por padr\u00e3o. Caso queira especificar outro host ou dom\u00ednio, voc\u00ea pode passa-los no construtor do cliente, como exibido abaixo:    var client = new MessagingHubClient( meuhost.com ,  meudominio.com )  Al\u00e9m do nome do host e do dom\u00ednio, uma autentica\u00e7\u00e3o \u00e9 obrigat\u00f3ria. Essa autentica\u00e7\u00e3o pode ser na forma de um login e senha, ou na forma de um login e uma chave de acesso, sendo o m\u00e9todo da chave de acesso preferencial.  Usando login e senha:  const string login =  user ;\nconst string password =  password ;\n\n// Uma vez que o nome do host e a senha n\u00e3o foram informados, os valores padr\u00f5es ser\u00e3o usados.\nvar client = new MessagingHubClient()\n                .UsingAccount(login, password);  Usando login e chave de acesso:  const string login =  user ;\nconst string accessKey =  key ;\n\n// Uma vez que o nome do host e a senha n\u00e3o foram informados, os valores padr\u00f5es ser\u00e3o usados.\nvar client = new MessagingHubClient()\n                .UsingAccessKey(login, accessKey);  Retornar ao \u00cdndice", 
            "title": "Configura\u00e7\u00e3o do Cliente"
        }
    ]
}